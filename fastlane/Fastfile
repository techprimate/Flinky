default_platform(:ios)

platform :ios do
  lane :build_ci do
    # Configure CI keychain and set match to readonly to avoid prompts
    setup_ci if is_ci

    # Setup code signing
    sync_code_signing(
      type: "appstore",
      readonly: true,
      app_identifier: "com.techprimate.Flinky",
      git_private_key: ENV["MATCH_GIT_PRIVATE_KEY"]
    )
    sync_code_signing(
      type: "appstore",
      readonly: true,
      app_identifier: "com.techprimate.Flinky.ShareExtension",
      git_private_key: ENV["MATCH_GIT_PRIVATE_KEY"]
    )

    # Build and export the app to an archive
    build_app(
      project: "Flinky.xcodeproj",
      scheme: "App",
      archive_path: "./Flinky.xcarchive",
      build_path: ".",
      export_options: {
        "destination" => "export",
        "method" => "app-store-connect",
        "provisioningProfiles" => {
          "com.techprimate.Flinky" => "match AppStore com.techprimate.Flinky",
          "com.techprimate.Flinky.ShareExtension" => "match AppStore com.techprimate.Flinky.ShareExtension"
        },
        "signingCertificate" => "Apple Distribution",
        "signingStyle" => "manual",
        "teamID" => "BZ362SQ6AB",
      }
    )
    
    # Upload the archive to Sentry for further analysis
    #
    # Store original verbose state and enable verbose logging for debugging
    original_verbose = FastlaneCore::Globals.verbose?
    FastlaneCore::Globals.verbose = true
    sentry_upload_build(
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: "techprimate",
      project_slug: "flinky",
      xcarchive_path: "./Flinky.xcarchive",
    ) if is_ci
    # Restore original verbose state
    FastlaneCore::Globals.verbose = original_verbose
  end

  desc "Generate app icon sizes from source image using fastlane-plugin-appicon"
  lane :generate_app_icons do
    UI.message "Generating app icon sizes using fastlane-plugin-appicon"

    # Configure MiniMagick to use ImageMagick for consistent metadata handling
    require 'mini_magick'
    MiniMagick.configure { |config| config.cli = :imagemagick }

    # Use absolute paths to avoid plugin directory changes
    project_root = File.expand_path("..")
    source_image = File.join(project_root, "Resources", "AppIcon.png")
    assets_path = File.join(project_root, "Targets", "App", "Sources", "Resources", "Assets.xcassets")
    icon_output_dir = File.join(assets_path, "AppIcon.appiconset")

    UI.message "Using source image: #{File.basename(source_image)}"

    # Verify source image exists
    unless File.exist?(source_image)
      UI.user_error! "Source image not found at #{source_image}"
    end

    # Generate iOS app icons (iPhone, iPad, App Store)
    appicon(
      appicon_image_file: source_image,
      appicon_devices: [:iphone, :ipad, :ios_marketing],
      appicon_path: assets_path,
      remove_alpha: true,
      minimagick_cli: "imagemagick"
    )

    UI.message "Stripping metadata from generated icons to ensure git-reproducible output"

    # Strip metadata from all generated icon files
    Dir.glob(File.join(icon_output_dir, "*.png")).each do |icon_path|
      UI.verbose "Processing: #{File.basename(icon_path)}"

      begin
        image = MiniMagick::Image.open(icon_path)
        image.combine_options do |b|
          # Strip all existing metadata
          b << "-strip"

          # Set consistent comment
          b << "-set" << "comment" << "Generated using fastlane-plugin-appicon"

          # Exclude PNG time chunks to prevent timestamp variations
          b << "-define" << "png:exclude-chunks=tIME"

          # Set consistent timestamps to prevent git detecting changes
          timestamp = "2024-01-01T00:00:00Z"
          b << "-set" << "date:create" << timestamp
          b << "-set" << "date:modify" << timestamp
          b << "-set" << "date:timestamp" << timestamp

          # Set consistent resolution info
          b.density "72x72"
          b << "-set" << "units" << "PixelsPerInch"

          # Set consistent user time
          b << "-set" << "user:time" << "0"
        end

        # Write the processed image back
        image.write(icon_path)

      rescue => e
        UI.error "Failed to process #{icon_path}: #{e.message}"
      end
    end

    UI.success "✅ All app icon sizes generated and metadata stripped successfully!"
    UI.message "Icons generated in: Targets/App/Sources/Resources/Assets.xcassets/AppIcon.appiconset/"
    UI.message "📝 Icons are now git-reproducible (no metadata changes on regeneration)"
  end

  desc "Generate screenshots"
  lane :generate_screenshots do
    UI.message "Generating screenshots"

    capture_screenshots(
      scheme: "ScreenshotUITests",
      devices: [
        "iPhone 16 Pro Max", # iPhone 6.9" display
        "iPhone 16 Pro", # iPhone 6.3" display

        "iPad Pro 13-inch (M4)", # iPad 13" display
        "iPad Pro 11-inch (M4)", # iPad 11" display
      ],
      languages: ["en-US"],

      clear_previous_screenshots: true,
      concurrent_simulators: true,
      skip_open_summary: true,

      reinstall_app: true,
      override_status_bar: true,
      localize_simulator: true,
      disable_slide_to_type: true,
      number_of_retries: 0
    )

    UI.success "✅ Screenshots generated successfully!"
    UI.message "Screenshots generated in: ScreenshotUITests/Screenshots/"
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do |options|
    # Get version info to match what the app uses
    version_number = get_version_number(
      xcodeproj: "Flinky.xcodeproj",
      target: "Flinky"
    )

    # Increment build number before building
    increment_build_number(xcodeproj: "Flinky.xcodeproj")
    build_number = get_build_number(xcodeproj: "Flinky.xcodeproj")

    # Build the app
    build_app(
      project: "Flinky.xcodeproj",
      scheme: "App",

      archive_path: "./Flinky.xcarchive",
      build_path: ".",
      export_options: {
        "destination" => "export",
        "method" => "app-store-connect",
        "provisioningProfiles" => {
          "com.techprimate.Flinky" => "match AppStore com.techprimate.Flinky",
          "com.techprimate.Flinky.ShareExtension" => "match AppStore com.techprimate.Flinky.ShareExtension"
        },
        "signingCertificate" => "Apple Distribution",
        "signingStyle" => "manual",
        "teamID" => "BZ362SQ6AB",
      }
    )

    # Validate the app
    deliver(
      # API Key file must be located at fastlane/api-key.json
      api_key_path: File.expand_path("./api-key.json"),
      verify_only: true
    )

    # Create Sentry release using the same format as the app
    sentry_create_release(
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: "techprimate",
      project_slug: "flinky",

      app_identifier: "com.techprimate.Flinky",
      version: version_number
    )

    # Upload debug symbols to Sentry
    sentry_debug_files_upload(
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: "techprimate",
      project_slug: "flinky",

      # Wait for the server to fully process uploaded files. Errors
      # can only be displayed if --wait is specified, but this will
      # significantly slow down the upload process
      wait: true
    )

    # Upload the xcarchive to Sentry for further analysis
    #
    # Store original verbose state and enable verbose logging for debugging
    original_verbose = FastlaneCore::Globals.verbose?
    FastlaneCore::Globals.verbose = true
    sentry_upload_build(
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: "techprimate",
      project_slug: "flinky",
      xcarchive_path: "./Flinky.xcarchive",
    )
    # Restore original verbose state
    FastlaneCore::Globals.verbose = original_verbose

    # Associate commits with the release
    sentry_set_commits(
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: "techprimate",
      project_slug: "flinky",

      app_identifier: "com.techprimate.Flinky",
      version: version_number,
      build: build_number,
      auto: true
    )

    # Upload to TestFlight
    upload_to_testflight(
      # API Key file must be located at fastlane/api-key.json
      api_key_path: File.expand_path("./api-key.json"),
      app_version: version_number,
      build_number: build_number,

      distribute_external: options[:distribute_external] || false,
      groups: ["Friends At Sentry", "Friends Of Phil"],
      beta_app_description: "Thanks for testing Flinky!

Please focus on testing these core features:
• Creating and editing links - try various URL types (websites, deep links, etc.)
• Organizing links into lists with custom colors and symbols
• Link sharing via QR codes, AirDrop, and standard sharing
• Search functionality across your links and lists
• Link management actions (edit, delete, pin, move between lists)

Pay special attention to:
• App performance and responsiveness
• Any crashes or unexpected behavior
• UI/UX issues or confusing interactions
• Accessibility with VoiceOver if possible

In case you notice any issues, please use the \"Send Feedback\" button in the app, or take a screenshot, tap on the share button and select \"Share Beta Feedback\".

Your feedback helps us improve Flinky for everyone. Thank you!"
    )

    # Finalize the Sentry release after successful upload
    sentry_finalize_release(
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: "techprimate",
      project_slug: "flinky",

      app_identifier: "com.techprimate.Flinky",
      version: version_number,
      build: build_number
    )

    # Create version tag
    version_tag = "v#{version_number}+#{build_number}"

    # Commit the version changes (project.pbxproj and Root.plist are updated by build scripts)
    git_add(path: ["Flinky.xcodeproj/project.pbxproj", "Targets/App/Sources/Resources/Settings.bundle/Root.plist"])
    git_commit(
      path: ["Flinky.xcodeproj/project.pbxproj", "Targets/App/Sources/Resources/Settings.bundle/Root.plist"],
      message: "chore: Bump version to #{version_number} (#{build_number})"
    )

    # Create git tag for this version
    add_git_tag(tag: version_tag)

    # Push the commit and tag to remote
    push_to_git_remote(
      remote: 'origin',
      local_branch: version_tag,
    )
  end

  desc "Upload metadata to App Store Connect"
  lane :upload_metadata do
    # Monkey patch to add iPhone 16 Pro Max resolutions to screenshot handling
    require 'deliver/app_screenshot'

    Deliver::AppScreenshot.class_eval do
      class << self
        # Store original methods
        alias_method :original_device_messages, :device_messages
        alias_method :original_devices, :devices

        def device_messages
          messages = original_device_messages
          # Add iPhone 16 Pro Max resolution to existing resolutions
          messages[Deliver::AppScreenshot::ScreenSize::IOS_67_MESSAGES] = messages[Deliver::AppScreenshot::ScreenSize::IOS_67_MESSAGES] + [
            [1320, 2868],
            [2868, 1320]
          ]
          # Add iPhone 16 Pro resolution to existing resolutions
          messages[Deliver::AppScreenshot::ScreenSize::IOS_61_MESSAGES] = messages[Deliver::AppScreenshot::ScreenSize::IOS_61_MESSAGES] + [
            [1206, 2622],
            [2622, 1206]
          ]
          messages
        end

        def devices
          devices = original_devices
          # Add iPhone 16 Pro Max resolution to existing resolutions
          devices[Deliver::AppScreenshot::ScreenSize::IOS_67] = devices[Deliver::AppScreenshot::ScreenSize::IOS_67] + [
            [1320, 2868],
            [2868, 1320]
          ]
          # Add iPhone 16 Pro resolution to existing resolutions
          devices[Deliver::AppScreenshot::ScreenSize::IOS_61] = devices[Deliver::AppScreenshot::ScreenSize::IOS_61] + [
            [1206, 2622],
            [2622, 1206]
          ]
          # Add iPad Pro 13-inch (M4) resolution to existing resolutions
          devices[Deliver::AppScreenshot::ScreenSize::IOS_IPAD_PRO_12_9] = devices[Deliver::AppScreenshot::ScreenSize::IOS_IPAD_PRO_12_9] + [
            [2064, 2752],
            [2752, 2064]
          ]
          # Add iPad Pro 11-inch (M4) resolution to existing resolutions
          devices[Deliver::AppScreenshot::ScreenSize::IOS_IPAD_11] = devices[Deliver::AppScreenshot::ScreenSize::IOS_IPAD_11] + [
            [1668, 2420],
            [2420, 1668]
          ]
          devices
        end
      end
    end

    UI.message "Uploading metadata to App Store Connect"
    upload_to_app_store(
      api_key_path: File.expand_path("./api-key.json"),

      skip_binary_upload: true,
      overwrite_screenshots: true,

      run_precheck_before_submit: false,
      precheck_include_in_app_purchases: false,

      languages: ["en-US"],
      metadata_path: File.expand_path("./metadata"),
      screenshots_path: File.expand_path("./screenshots"),

      force: true, # Skip the preview HTML

      app_review_information: {
        email_address: ENV["APP_REVIEW_EMAIL_ADDRESS"],
        phone_number: ENV["APP_REVIEW_PHONE_NUMBER"]
      }
    )
  end

  lane :setup_code_signing do
    UI.message "Syncing code signing..."
    sync_code_signing(
      type: "development",
      app_identifier: "com.techprimate.Flinky"
    )
    sync_code_signing(
      type: "appstore",
      app_identifier: "com.techprimate.Flinky"
    )
    sync_code_signing(
      type: "development",
      app_identifier: "com.techprimate.Flinky.ShareExtension"
    )
    sync_code_signing(
      type: "appstore",
      app_identifier: "com.techprimate.Flinky.ShareExtension"
    )
    UI.success "✅ Code signing synced successfully!"
  end
end
